Express Notes
-------------
- (a framework)"Express" js on "node" js for a restful API
- need node js and node package manager
- cmd >npm init (-y for default) where "npm init -y"
- "npm i express" to install express module
- node index.js to run at ide's terminal or command prompt
- "npm i -g nodemon" < install nodemon for realtime tracking in development (node monitor)
//add "sudo" on mac if permission property is not configured yet where ">sudo npm i -g nodemon"
-g for global

x-------------------------------------------------------------x

About Restful API for a beginner
--------------------------------

- API ( Application Programming Interface ) - connection between computers or between computer programs

- "REST" => most common communication standard between computers / A Common API standards

- mobile/web application ==use==> REST ==to==> talk to the server ( **A set of rules for building web API** )

- REST ==> REpresentational State Transfer 

- Restful API ==> API that follows REST standard/ an architectural style

REST principles
---------------
- Stateless, where each request is independent and must contain all the information needed for processing

- Resource-Based identification /users, /products

- use standard http methods

- resource representation in JSON or XML format

x--------------------------------------------------x

REST basics
-----------
- Uniform Resource Identifiers ( URI ) 

- URIs <== different types of resources "users"/"products" **(nouns)**

- Requests or HTTP verbs ==preceeds/use-to-get==> URIs (resources)

- HTTP verbs ==> POST/GET/PUT/DELETE (CRUD) // Requests

- Request's body ==could have==> custom payload of data (encoded in JSON) ("optional HTTP requests")

-* REST implementation should be stateless ( two parties don't need to store any information about each other "client" and "server" )

-* Every req/res independent from all others

- Versioning is important >>allows>> implementation to backward compatibility
(eg. prefix the version before the resource on the URI => "/v1/products" "/v2/products" )

x-----------------------------------------------------x

Process of RESTful API
----------------------

1.client req
2.server receives/process req
3.server response httpstatus + req/obj (GET/POST)

- httpstatus 
[ 200+(good/success), 400+(something went wrong with req/client level), 500+(server level error) ]

About APIs // Endpoints
-----------------------

Public APIs
-http end points like "https://market/resources/clothes/1"
-URL ( Uniform Resource Locator )

APIs with authentications
- ( curl -H "Authorization: token OAUTH-TOKEN" https://api.github.com )
- ( curl https://api.github.com/?access_token = OAUTH-TOKEN )
- ( curl 'https://api.github.com/users/whatever?client_id=xxxx&client_secret=yyyy' )

PUT and PATCH diff
------------------
PUT - Update the entire existing source
PATCH - update part of an existing source


xxx
TypeORM => Can Connect with Most of the databases
Mongoose => Only for Mongodb
xxx

Cookies
-------
/*note: the explanation will be basic-easy-to-understand.
/*note: some of the notes here might not be entirely correct (arguable) but basic and easy to memorize
...

/what are cookies?:
- text files with small pieces of data (eg. username, session ID)
- sent from the server to the user's browser
/after-process: browser stores the cookie and sends it back to the server when user request to the same domain as subsequent request
/purpose: to store user-specific information (eg. login sessions, preferences or items in a shopping cart.

/type of cookies:
- session cookies: temporary info storage/ removed after a session (browser closed)
- persistent cookies: long term info storage/ removed after set amount of time (eg. remembering login credentials )
- first-party cookies: set by visited website directly (user pref/sessions/etc...)
- third-party cookies: set by other parties (eg. ad/ networks/ usedFor: cross-site tracking/targeted advertising)

/How Cookies work
- USER ( visits a website ) --> SERVER --send--> "Set-Cookie" header in HTTP response
- BROWSER --saves--> cookie
- USER ( visits same website ): BROWSER --sends--> saved cookie --to--> SERVER /with "Cookie" header


Sample Cookies
--------------
From SERVER to BROWSER: " Set-Cookie: session_id=12345; HttpOnly; Secure; SameSite=Strict
From BROWSER to SERVER: " Cookie: session_id=12345 "


Properties of a Cookie
----------------------
- Name=Value or Key=Value pairs like sessionID=abc123 => actual data stored in the cookie
- Domain: specifies the domain for which the cookie is valid
- Path: limits the cookie to a specific path within the domain
- Expires/Max-age: duration of the cookie's validity
- Secure: ensures the cookie is only sent over HTTPS
- HttpOnly: prevents client-side js from accessing the cookie (prevents XSS attacks)
- SameSite: controls whether the cookie is sent with cross-site req (helps prevent CSRF attacks)
- some other keywords
  Strict: Cookies are sent only for same-site req
  Lax: Cookies are sent with top-evel navigation and some GET req
  None: Cookies are sent in all contexts (must also have "Secure")
  XSS: Cross-Site Scripting 
  CSRF: Cross-Site Request Forgery 

Cookies Use-cases
-----------------
- Authenticaiton: Session cookies can keep users looged in while they navigate a website
- Personalization: Persistent cookies can store user preferences like dark mode
- Shopping Carts: Cookies can track items added to a cart without requiring a login.
- Analytics: Websites use cookies to understand user behavior like google analytics
- Targeted Advertising: Third-party cookies track user behavior across multiple sites to serve relevant ads.
Note*- Third-party cookies can track users across multiple sites which raise privacy concerns/ user consent about cookies <- Laws enforces website


JWT (JSON Web Token)
--------------------
- an open standard (RFC 7519)
- for securely transmitting information between parties as JSON obj
- information can be verified and trusted -> digitally signed
- commonly used for authentication and authorization in modern web applications

JWT - ( header.payload.signature ) < three parts
Each part is Base64Url-encoded:
- Header: Contains information about the token (e.g., algorithm and type).
- Payload: Contains the claims (e.g., user data and token expiration).
- Signature: Ensures the token hasn't been tampered with.


How JWT Works
-------------
//authentication
- CLIENT -requestLogin-> w/credentials -to-> SERVER
- SERVER -verifies-> user's credentials -ifvalid-> generates JWT -sendTo-> CLIENT as response
...
- CLIENT stores JWT in localstorage, session storage or cookies after Authentication
- JWT -includes-> Header.Payload.Signature
- CLIENT then uses JWT to request access to protected resource where server decodes and check if the signature sent by client matches the one **recreated** on server


bcrypt
------
- A module for node.js just like express
- password hashing ( not encryption )
- helps store passwords securely by converting them into an irreversible hash
- securely hash and validate passwords ( during user authentication )
- sample term: store password in the most inreadible way possible ( secure password storage )


Nodemailer
----------
- another node.js module that simplifies sending mails from server-side applications
- features: 
1. support popular email services like gmail, outlook, yahoo
2. allows custom SMTP configurations for private email servers
3. send emails with rich HTML content for better formatting
4. can attach files, images or documents to emails
5. supports secure connections via TLS/SSL
6. add custom headers or set email priorities
/*note: SMTP-Simple Mail Transfer Protocol, TLS-Transport Layer Security, SSL-Secure Sockets Layer, TLS > SSL

Rate Limits: For high-volume email sending, consider third-party services like SendGrid, Mailgun, or Postmark.



